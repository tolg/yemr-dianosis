// Generated by CoffeeScript 1.9.2

/**
 * Module dependencies.
 */

(function() {
  var _, app, diagData, excelParser, express, getTreeNodes, http, path, query, server, staticExts;

  _ = require('underscore');

  express = require('express');

  http = require('http');

  path = require('path');

  app = express();

  excelParser = require('./src/parseExcel');

  staticExts = ['css', 'js', 'html', 'htm', 'png', 'gif', 'jpg', 'jpeg', 'json'];

  app.set('port', process.env.PORT || 3030);

  app.use(express.urlencoded());

  app.use(express.methodOverride());

  app.use(app.router);

  app.use(express["static"](path.join(__dirname, 'public')));

  diagData = excelParser('diag.csv');

  console.log(diagData.diags);

  if ('development' === app.get('env')) {
    app.use(express.errorHandler());
  }

  app.get('/querydiag', function(req, res) {
    return res.json(query(req.query.keyword));
  });

  app.get('/validatediag', function(req, res) {
    var foundDiag, userDiag;
    userDiag = req.query.diag.trim();
    foundDiag = (function() {
      var item, j, len, ref, ref1;
      ref = diagData.diags;
      for (j = 0, len = ref.length; j < len; j++) {
        item = ref[j];
        if (userDiag === item.name) {
          return item.name;
        }
        if (userDiag === ((ref1 = item.aliasFor) != null ? ref1.name : void 0)) {
          return item.aliasFor.name;
        }
      }
    })();
    return res.json({
      valid: !!foundDiag,
      formalName: foundDiag
    });
  });

  app.post('/getdiagtree', function(req, res) {
    return res.json(getTreeNodes(req.body.name));
  });

  server = http.createServer(app);

  server.listen(app.get('port'), function() {
    console.log('yemr server listening on port ' + app.get('port'));
  });

  query = function(key) {
    if (!key) {
      return [];
    }
    key = key.toLowerCase();
    return _.chain(diagData.diags).filter(function(item) {
      var ref, ref1;
      return ((ref = item.name) != null ? ref.indexOf(key) : void 0) > -1 || ((ref1 = item.pinyin) != null ? ref1.indexOf(key) : void 0) > -1;
    }).sortBy(function(item) {
      return item.name.length;
    }).first(20).sortBy(function(item) {
      return _.chain(item.name.indexOf(key), item.pinyin.indexOf(key)).filter(function(i) {
        return i > -1;
      }).min().value();
    }).pluck('name').value();
  };

  getTreeNodes = function(name) {
    var classifys, diags;
    name = (name === '全部诊断' ? void 0 : name);
    console.log(name);
    classifys = _.filter(diagData.classifys, function(item) {
      var ref;
      return ((ref = item["super"]) != null ? ref.name : void 0) === name;
    }).map(function(item) {
      return _.extend({
        isParent: true,
        async: true
      }, item);
    });
    diags = name ? _.filter(diagData.diags, function(item) {
      var ref;
      return ((ref = item.classify) != null ? ref.name : void 0) === name;
    }) : [];
    return classifys.concat(diags);
  };

}).call(this);
