// Generated by CoffeeScript 1.9.2
(function() {
  var _, extractData, fs, getPinyin, getVoidSize, normalizeSpaces, py;

  _ = require('underscore');

  fs = require('fs');

  py = require('pinyin');

  getVoidSize = function(row) {
    return _.filter(row, function(w) {
      return !(w != null ? w.trim() : void 0);
    }).length;
  };

  normalizeSpaces = function(input) {
    var ref;
    return input != null ? (ref = input.replace(/\s+$/, '')) != null ? ref.replace(/\s+/g, 'ã€€') : void 0 : void 0;
  };

  extractData = function(rows) {
    var alias, c, classifyGenId, classifys, currClassify, diagGenId, diags, filledCells, i, j, k, len, len1, lineNum, mainDiag, nextLineVoidSize, row, thisClassifys, voidSize;
    diags = [];
    classifys = [];
    currClassify = [];
    classifyGenId = 0;
    diagGenId = 0;
    for (lineNum = j = 0, len = rows.length; j < len; lineNum = ++j) {
      row = rows[lineNum];
      thisClassifys = [];
      voidSize = getVoidSize(row);
      nextLineVoidSize = getVoidSize(rows[lineNum + 1]);
      filledCells = _.rest(row, voidSize);
      if (lineNum === 0 || nextLineVoidSize > voidSize) {
        thisClassifys = _.chain(filledCells).first(nextLineVoidSize - voidSize).map(function(c, i) {
          return {
            name: c,
            "super": {
              id: ++classifyGenId
            }
          };
        }).value();
        ({
          name: filledCells[0],
          id: ++classifyGenId
        });
      }
      if (thisClassifys != null ? thisClassifys.length : void 0) {
        for (i = k = 0, len1 = thisClassifys.length; k < len1; i = ++k) {
          c = thisClassifys[i];
          c["super"] = i === 0 ? currClassify[voidSize - 1] || null : thisClassifys[i - 1];
        }
        currClassify = _.first(currClassify, voidSize).concat(thisClassifys);
        classifys = classifys.concat(thisClassifys);
        filledCells = _.rest(filledCells, thisClassifys.length);
      }
      mainDiag = {
        name: normalizeSpaces(filledCells[0]),
        id: ++diagGenId,
        classify: _.last(currClassify),
        aliasFor: null
      };
      mainDiag.pinyin = getPinyin(mainDiag.name);
      alias = _.map(_.rest(filledCells), function(alias) {
        return {
          name: normalizeSpaces(alias),
          id: ++diagGenId,
          classify: _.last(currClassify),
          aliasFor: mainDiag
        };
      });
      alias.pinyin = getPinyin(alias.name);
      diags = diags.concat(mainDiag).concat(alias);
    }
    return {
      diags: diags,
      classifys: classifys
    };
  };

  getPinyin = function(zh) {
    return _.map(zh, function(c) {
      var ref, ref1;
      return ((ref = py(c)[0]) != null ? (ref1 = ref[0]) != null ? ref1.substr(0, 1) : void 0 : void 0) || '';
    }).join('');
  };

  module.exports = function(file) {
    var rows;
    rows = fs.readFileSync(file, 'utf8').split('\r').map(function(line) {
      var row;
      row = line.split(';');
      row = row.filter(function(cell, i) {
        return cell || _.find(row.slice(i + 1), function(rest) {
          return rest;
        });
      });
      return row;
    });
    return extractData(rows);
  };

}).call(this);
